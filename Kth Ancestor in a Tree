Kth Ancestor in a Tree

27 July,2023
Given a binary tree of size  N, a node, and a positive integer k., Your task is to complete the function kthAncestor(), the function should return the kth ancestor of the given node in the binary tree. If there does not exist any such ancestor then return -1.
Note:
1. It is guaranteed that the node exists in the tree.
2. All the nodes of the tree have distinct values.

Example 1:



Input:
K = 2 Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his

SOLUTION;-
//User function Template for C++
/*
Structure of the node of the binary tree is as
struct Node
{
	int data;
	struct Node *left, *right;
};
*/
// your task is to complete this function
void populate(Node *root, int val, vector<int> &v, vector<vector<int>> &ans){
    if(root == NULL) return;
    if(root -> data == val){
        ans.push_back(v);
        return;
    } 
    v.push_back(root -> data);
    populate(root -> left, val, v, ans);
    populate(root -> right, val, v, ans);
    v.pop_back();
    
}
int kthAncestor(Node *root, int k, int node)
{
    // Code here
    vector<int> v;
    vector<vector<int>> ans;
    populate(root, node, v, ans);
    
    if(!ans.size()) return -1;
    
    v = ans[0];
    reverse(v.begin(), v.end());
    
    if(v.size() < k) return -1;
    else return v[k-1];
}
